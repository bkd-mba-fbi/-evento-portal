import { PropertySignature } from './property.js';
export type StorageOptions = {
    key?: string;
    prefix?: string;
};
/**
 * A decorator for syncing state values with localStorage
 *
 * A state property marked with @storage will read the value
 * from the associated localStorage item, parse it depending on
 * its type and make it available to the state.
 *
 * Anytime the state propery changes, the change is reflected
 * to localStorage.
 *
 * A default (`_ls` for `Lit State`) prefix is set
 *
 * @storage must be placed before @property for this to work.
 *
 * How to use:
 * ```js
 * class MyState extends State {
 *
 *   @storage({key: 'storage_path'})
 *   @property({value: 1}) a;
 * }
 * const s = new S()
 *
 * localStorage.getItem('_ls_storage_path')
 *
 * ```
 *
 * @param options
 * @returns PropertySignature
 */
export declare function storage(options?: StorageOptions): PropertySignature;
//# sourceMappingURL=storage.d.ts.map