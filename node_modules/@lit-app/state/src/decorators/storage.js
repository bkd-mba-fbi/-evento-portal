import { decorateProperty } from '@lit/reactive-element/decorators/base.js';
import { parse } from './parse.js';
import { functionValue } from '../functionValue.js';
const defaultOptions = {
    prefix: '_ls'
};
/**
 * A decorator for syncing state values with localStorage
 *
 * A state property marked with @storage will read the value
 * from the associated localStorage item, parse it depending on
 * its type and make it available to the state.
 *
 * Anytime the state propery changes, the change is reflected
 * to localStorage.
 *
 * A default (`_ls` for `Lit State`) prefix is set
 *
 * @storage must be placed before @property for this to work.
 *
 * How to use:
 * ```js
 * class MyState extends State {
 *
 *   @storage({key: 'storage_path'})
 *   @property({value: 1}) a;
 * }
 * const s = new S()
 *
 * localStorage.getItem('_ls_storage_path')
 *
 * ```
 *
 * @param options
 * @returns PropertySignature
 */
export function storage(options) {
    options = { ...defaultOptions, ...options };
    // console.info('storage options', options)
    return decorateProperty({
        // @ts-ignore ctor is typof State and not typeof ReactiveElement
        finisher: (ctor, name) => {
            // console.info('storage ', name)
            const descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, name);
            if (!descriptor) {
                throw new Error('@local-storage decorator need to be called after @property');
            }
            const key = `${options?.prefix || ''}_${options?.key || String(name)}`;
            const definition = ctor.propertyMap.get(name);
            const type = definition?.type;
            if (definition) {
                const previousValue = definition.initialValue;
                definition.initialValue = () => parse(localStorage.getItem(key), type) ?? functionValue(previousValue);
                ctor.propertyMap.set(name, { ...definition, ...options });
            }
            // const oldGetter = descriptor?.get;
            const oldSetter = descriptor?.set;
            const setter = function (value) {
                if (value !== undefined) {
                    localStorage.setItem(key, (type === Object ||
                        type === Array) ? JSON.stringify(value) : value);
                }
                if (oldSetter) {
                    oldSetter.call(this, value);
                }
            };
            const newDescriptor = {
                ...descriptor,
                set: setter
            };
            Object.defineProperty(ctor.prototype, name, newDescriptor);
        }
    });
}
//# sourceMappingURL=storage.js.map