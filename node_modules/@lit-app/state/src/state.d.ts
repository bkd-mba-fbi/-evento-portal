import { Hook } from './hook.js';
import { PropertyOptions } from './decorators/property.js';
import { StorageOptions } from './decorators/storage.js';
import { QueryOptions } from './decorators/query.js';
export interface HasChanged {
    (value: unknown, old: unknown): boolean;
}
export interface Unsubscribe {
    (): void;
}
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */
export declare const notEqual: HasChanged;
export type PropertyMapOptions = PropertyOptions & StorageOptions & QueryOptions & {
    initialValue: any;
    hook?: {
        [key: string]: any;
    };
    resetValue: any;
};
/**
 * Callback function - used as callback subscription to a state change
 */
export type Callback = (key: string, value: any, state: State) => void;
/**
 * A state, firing `lit-state-change` when any of it property changes
 *
 */
export declare class State extends EventTarget {
    static propertyMap: Map<string, PropertyMapOptions>;
    static properties: PropertyOptions;
    static finalized: boolean;
    get propertyMap(): Map<string, PropertyMapOptions>;
    get stateValue(): {
        [k: string]: unknown;
    };
    hookMap: Map<string, Hook>;
    constructor();
    protected static finalize(): boolean;
    static createProperty(name: string, options?: PropertyOptions): void;
    protected static getPropertyDescriptor(name: string, key: string | symbol, options?: PropertyOptions): PropertyDescriptor;
    /**
     * Reset the state to its original values, skipping
     * properties marked as skipReset
     */
    reset(): void;
    /**
     * subscribe to state change event. The callback will be called anytime
     * a state property change if `nameOrNames` is undefined, or only for matching
     * property values specified by `nameOrNames`
     * @param callback the callback function to call
     * @param nameOrNames
     * @returns a unsubscribe function.
     */
    subscribe(callback: Callback, nameOrNames?: string | string[], options?: AddEventListenerOptions): Unsubscribe;
    private dispatchStateEvent;
}
//# sourceMappingURL=state.d.ts.map