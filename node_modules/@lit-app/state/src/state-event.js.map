{"version":3,"file":"state-event.js","sourceRoot":"","sources":["state-event.ts"],"names":[],"mappings":"AAEA;;GAEG;AACF,MAAa,UAAW,SAAQ,KAAK;IACpC,MAAM,CAAU,SAAS,GAAG,mBAAmB,CAAC;IACvC,GAAG,CAAS;IACZ,KAAK,CAAQ;IAEb,KAAK,CAAU;IAExB;;;OAGG;IACH,YAAY,GAAW,EAAE,KAAc,EAAE,KAAY;QACnD,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE;YAC1B,UAAU,EAAE,KAAK;SAClB,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;;SAlBW,UAAU","sourcesContent":["import { State } from './state.js';\n\n/**\n * This event is fired to inform a state has updated one of its value\n */\n export class StateEvent extends Event {\n  static readonly eventName = 'lit-state-changed';\n  readonly key: string;\n  readonly state: State;\n\n  readonly value: unknown;\n  \n  /**\n   * @param  {string} key of the state that has changed\n   * @param  {unknown} value for the changed key\n   */\n  constructor(key: string, value: unknown, state: State) {\n    super(StateEvent.eventName, {\n      cancelable: false,\n    });\n    this.key = key;\n    this.value = value;\n    this.state = state;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    [StateEvent.eventName]: StateEvent;\n  }\n}\n\n"]}