{"version":3,"file":"hook.js","sourceRoot":"","sources":["hook.ts"],"names":[],"mappings":"AACA,MAAM,QAAQ,GAAW,UAAU,CAAA;AAInC;;GAEG;AACH,MAAa,IAAI;IAKG;IAJnB,MAAM,CAAC,QAAQ,GAAW,QAAQ,CAAA;IAElC,WAAW,CAAY;IAEvB,YAAmB,KAAY;QAAZ,UAAK,GAAL,KAAK,CAAO;QAC9B,IAAG,CAAE,IAAI,CAAC,WAA2B,CAAC,QAAQ,IAAK,IAAI,CAAC,WAA2B,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAC1G,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAA;SAC7D;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,EAAE,CAAA;QACnC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAE,IAAI,CAAC,WAA2B,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;IACpE,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;IAC7F,CAAC;IAED,IAAI,WAAW;QACd,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC,UAAU,EAAE,IAAI;eAC1E,UAAU,EAAE,IAAI,CAAE,IAAI,CAAC,WAA2B,CAAC,QAAQ,CAAC,CAAC,CAAA;IAClE,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,GAAW;QACvB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAE,IAAI,CAAC,WAA2B,CAAC,QAAQ,CAAC,CAAA;IACnF,CAAC;IAED,aAAa,CAAC,GAAW;QACxB,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC;IAED,OAAO,CAAC,MAAe;QACtB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;aACrB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aACzC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAG,IAAI,CAAC,KAA0C,CAAC,GAAa,CAAC,GAAG,KAAK,CAAC,CAAA;IACrG,CAAC;IAED,cAAc;IACd,SAAS,CAAC,GAAW,EAAE,KAAc,EAAE,KAAY;QAClD,MAAM,CAAC,6CAA6C,CAAC,CAAA;IACtD,CAAC;IAED,cAAc;IACd,KAAK;QACJ,MAAM,CAAC,8CAA8C,CAAC,CAAA;IACvD,CAAC;;SAjDW,IAAI","sourcesContent":["import { State } from './state.js';\nconst DONOTUSE: string = 'DONOTUSE'\n\ntype Values = {[key:string]: unknown}\n\n/**\n * A base class for building state hooks\n */\nexport class Hook {\n\tstatic hookName: string = DONOTUSE\n\t\n\tunsubscribe: () => void\n\t\n\tconstructor(public state: State) {\n\t\tif(!(this.constructor as typeof Hook).hookName || (this.constructor as typeof Hook).hookName === DONOTUSE) {\n\t\t\tthrow new Error('hook subclass must have their own hookName')\n\t\t}\n\t\tthis.unsubscribe = this.subscribe()\n\t\tstate.hookMap.set((this.constructor as typeof Hook).hookName, this)\n\t}\n\n\tsubscribe() {\n\t\treturn this.state.subscribe(this.fromState.bind(this), this.hookedProps.map(([key]) => key))\n\t}\n\n\tget hookedProps() {\n\t\treturn [...this.state.propertyMap].filter(([, definition]) => definition?.hook \n\t\t\t&& definition?.hook[(this.constructor as typeof Hook).hookName])\n\t}\n\n\t/**\n\t * Returns true if the key is configured for this hook\n\t * @param key \n\t * @returns boolean\n\t */\n\tisHookedProp(key: string) {\n\t\treturn this.getDefinition(key)?.hook?.[(this.constructor as typeof Hook).hookName]\n\t}\n\n\tgetDefinition(key: string) {\n\t\treturn this.state.propertyMap.get(key)\n\t}\n\n\ttoState(values : Values) {\n\t\tObject.entries(values)\n\t\t.filter(([key]) => this.isHookedProp(key))\n\t\t.forEach(([key, value]) =>  (this.state as {} as { [key: string]: unknown })[key as string] = value) \n\t}\n\t\n\t// @ts-ignore \n\tfromState(key: string, value: unknown, state: State) {\n\t\tthrow ('fromState must be implemented in subclasses')\n\t}\n\t\n\t// @ts-ignore \n\treset() {\n\t\tthrow ('reset hook must be implemented in subclasses')\n\t}\n}"]}